- name: Get root filesystem
  become: true
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail # ansible-lint(risky-shell-pipe)
      blkid `# get block ids` \
      | grep $(df | grep '/$' | awk '{print $1}') `# find root filesystem`
  register: root_filesystem
  changed_when: false

- name: Get root filesystem path
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail # ansible-lint(risky-shell-pipe)
      echo {{ root_filesystem.stdout }} \
      | awk '{print $1}'                    `# get the first column which contains the path` \
      | grep '^\/.*\:$'                     `# validate previous command` \
      | sed 's/^\(\/.*\)\:$/\1/'            `# get the path without :` \
      | grep '^\/.*[^\:]$'                  `# validate previous command`
  register: root_filesystem_path
  changed_when: false

- name: Get root partition name
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail # ansible-lint(risky-shell-pipe)
      echo {{ root_filesystem_path.stdout }} \
      | grep '^\/\(.*\/\)*\([^\/]\+\)$'         `# validate root_filesystem_path` \
      | sed 's/^\/\(.*\/\)*\([^\/]\+\)$/\2/'    `# get just the name` \
      | grep '^[^\/]*$'                         `# validate previous command`
  register: root_partition_name
  changed_when: false

- name: Get root partition UUID
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail # ansible-lint(risky-shell-pipe)
      echo '{{ root_filesystem.stdout }}' \
      | awk '{for(i=1;i<=NF;i++){if ($i ~ /^UUID=/){print $i}}}' `# get the column which contains the uuid` \
      | sed 's/^UUID=\"\([0-9a-fA-F]\{8\}\b\-[0-9a-fA-F]\{4\}\b\-[0-9a-fA-F]\{4\}\b\-[0-9a-fA-F]\{4\}\b\-[0-9a-fA-F]\{12\}\)\"$/\1/' `# get just the uuid` \
      | grep '^[0-9a-fA-F]\{8\}\b-[0-9a-fA-F]\{4\}\b-[0-9a-fA-F]\{4\}\b-[0-9a-fA-F]\{4\}\b-[0-9a-fA-F]\{12\}$' `# validate previous command`
  register: root_partition_uuid
  changed_when: false

# - name: debug
#   ansible.builtin.debug:
#     msg: "{{ root_partition_uuid.stdout }}"

- name: Turn off Swap devices
  become: true
  ansible.builtin.command:
    cmd: swapoff -a
  changed_when: false

- name: Get memory size *2
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail # ansible-lint(risky-shell-pipe)
      awk '/MemTotal/ {print int($2*2)}' /proc/meminfo \
      | numfmt --from-unit=1K --to=iec --format=%.0f \
      | tr '[:upper:]' '[:lower:]'
  register: memory_size
  changed_when: false

- name: Remove swap file if exists
  become: true
  ansible.builtin.file:
    path: "{{ swap_file }}"
    state: absent

- name: Create a swap file
  become: true
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail # ansible-lint(risky-shell-pipe)
      btrfs filesystem mkswapfile --size "{{ memory_size.stdout }}" --uuid clear {{ swap_file }}
  changed_when: false

- name: Set up a linux swap area
  become: true
  ansible.builtin.command:
    cmd: "mkswap {{ swap_file }}"
  changed_when: false

- name: Turn on swap
  become: true
  ansible.builtin.command:
    cmd: "swapon {{ swap_file }}"
  changed_when: false

- name: Mount swap
  become: true
  ansible.posix.mount:
    src: "{{ swap_file }}"
    path: none
    fstype: swap
    opts: sw
    dump: 0
    passno: 0
    boot: true
    backup: true
    state: present

- name: Turn on Swap devices
  become: true
  ansible.builtin.shell: # noqa: command-instead-of-module
    executable: /bin/bash
    cmd: mount -a
  changed_when: false

- name: Get swap device physical offset
  become: true
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail # ansible-lint(risky-shell-pipe)
      filefrag -v {{ swap_file }} \
      | awk '$1=="0:" {print substr($4, 1, length($4)-2)}'
  register: sw_physical_offset
  changed_when: false

- name: Check if grub.bak exists
  ansible.builtin.stat:
    path: /etc/default/grub.bak
  register: grub_backup
  failed_when: false

- name: Backup grub
  become: true
  ansible.builtin.command: cp /etc/default/grub /etc/default/grub.bak
  when: not grub_backup.stat.exists
  changed_when: false

- name: Add to the GRUB_CMDLINE_LINUX_DEFAULT variables
  become: true
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT=".*"$'
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash mem_sleep_default=disk cryptdevice=UUID={{ root_partition_uuid.stdout }}:{{ root_partition_name.stdout }} root={{ root_filesystem_path.stdout }} resume={{ root_filesystem_path.stdout }} resume_offset={{ sw_physical_offset.stdout }}"' # yamllint disable-line rule:line-length
    backrefs: true
    state: present

- name: Update grub
  become: true
  ansible.builtin.command: grub2-mkconfig -o /boot/grub2/grub.cfg
  changed_when: false

# # -----------------------------------------------------------------------
# #  Custom suspend then hibernate!
# #  This is here beacuse there is currently a bug with systemd
# #  (https://github.com/systemd/systemd/issues/25269)
# #  Should be fixed after 253
# # -----------------------------------------------------------------------

# - name: Copy hybrid-sleep script
#   become: true
#   ansible.builtin.copy:
#     src: "{{ role_path }}/files/hybrid-sleep"
#     dest: /usr/local/bin/hybrid-sleep
#     mode: u=rwx,g=rx,o=rx

# - name: Ensures /etc/systemd/system/systemd-suspend.service.d dir exists
#   become: true
#   ansible.builtin.file:
#     path: /etc/systemd/system/systemd-suspend.service.d
#     state: directory
#     mode: u=rw,g=r,o=r

# - name: Systemd suspend override (systemctl edit systemd-suspend)
#   become: true
#   ansible.builtin.copy:
#     src: "{{ role_path }}/files/suspend.service"
#     dest: /etc/systemd/system/systemd-suspend.service.d/override.conf
#     mode: u=rw,g=r,o=r

# - name: Add suspend config
#   become: true
#   ansible.builtin.lineinfile:
#     path: /etc/systemd/logind.conf
#     line: "{{ item }}"
#   loop:
#     - HandlePowerKey=suspend
#     - HandleLidSwitch=suspend

- name: Ensures /etc/systemd/logind.conf.d dir exists
  become: true
  ansible.builtin.file:
    path: /etc/systemd/logind.conf.d
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Systemd logind.conf.d override
  become: true
  ansible.builtin.copy:
    src: "{{ role_path }}/files/logind.conf"
    dest: /etc/systemd/logind.conf.d/override.conf
    mode: u=rw,g=r,o=r

- name: Ensures /etc/systemd/sleep.conf.d dir exists
  become: true
  ansible.builtin.file:
    path: /etc/systemd/sleep.conf.d
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Systemd sleep.conf.d override
  become: true
  ansible.builtin.copy:
    src: "{{ role_path }}/files/sleep.conf"
    dest: /etc/systemd/sleep.conf.d/override.conf
    mode: u=rw,g=r,o=r

- name: Reload systemd daemons
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
